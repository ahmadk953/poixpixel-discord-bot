/*
  Poixpixel Discord Bot - Example configuration (JSON with comments / JSONC)

  How to use:
  - Copy to config.json and replace placeholders.
  - If strict JSON is required, remove all comments.
  - All Discord IDs are strings (snowflakes). Durations are numbers unless noted.
*/

{
  // REQUIRED: Discord bot token from https://discord.com/developers/applications
  "token": "DISCORD_BOT_TOKEN",

  // REQUIRED: Discord Application (Client) ID (string)
  "clientId": "DISCORD_BOT_ID",

  // REQUIRED: Primary guild (server) ID where commands are deployed (string)
  "guildId": "DISCORD_SERVER_ID",

  // OPTIONAL: Vanity or invite link used in messages/logs
  "serverInvite": "DISCORD_SERVER_INVITE_LINK",

  "database": {
    // PostgreSQL pooled connection string (e.g., pgbouncer/pooled URL)
    "poolingDbConnectionString": "POSTGRESQL_CONNECTION_STRING",

    // Direct PostgreSQL connection string (bypass pooling for migrations/DDL)
    "directDbConnectionString": "DIRECT_POSTGRESQL_CONNECTION_STRING",

    // Max attempts when establishing initial DB connection
    "maxRetryAttempts": 5,

    // Backoff between connection attempts in milliseconds
    "retryDelay": 1000,

    // Max attempts for individual query retries (transient errors)
    "queryRetryAttempts": 3,

    // Initial delay for query retry backoff in milliseconds
    "queryRetryInitialDelay": 250
  },

  "redis": {
    // Redis connection string. Use rediss:// for TLS if required.
    "redisConnectionString": "REDIS_CONNECTION_STRING",

    // Max attempts to reconnect to Redis before degrading gracefully
    "retryAttempts": 5,

    // Initial backoff delay (ms) for Redis reconnection (uses exponential backoff)
    "initialRetryDelay": 500
  },

  "channels": {
    // Target channel IDs (strings). Leave unset or remove keys you don't use.
    "welcome": "WELCOME_CHANNEL_ID",
    "logs": "LOG_CHANNEL_ID",
    "counting": "COUNTING_CHANNEL_ID",
    "factOfTheDay": "FACT_OF_THE_DAY_CHANNEL_ID",
    "factApproval": "FACT_APPROVAL_CHANNEL_ID",
    "advancements": "ADVANCEMENTS_CHANNEL_ID"
  },

  "roles": {
    // Roles automatically granted on join
    "joinRoles": [
      "JOIN_ROLE_ID_1",
      "JOIN_ROLE_ID_2"
    ],

    // Level-gated roles: when user reaches level >= level, grant roleId
    "levelRoles": [
      { "level": 5,  "roleId": "ROLE_ID_FOR_LEVEL_5"  },
      { "level": 10, "roleId": "ROLE_ID_FOR_LEVEL_10" },
      { "level": 20, "roleId": "ROLE_ID_FOR_LEVEL_20" }
    ],

    // Staff roles with friendly names for permission checks/UI
    "staffRoles": [
      { "name": "Moderator", "roleId": "MOD_ROLE_ID" },
      { "name": "Admin",     "roleId": "ADMIN_ROLE_ID" },
      { "name": "Owner",     "roleId": "OWNER_ROLE_ID" }
    ],

    // Role to ping for Fact of the Day announcements
    "factPingRole": "FACT_OF_THE_DAY_ROLE_ID"
  },

  "leveling": {
    // Cooldown between XP awards per user in seconds
    "xpCooldown": 45,

    // Minimum XP awarded per eligible message
    "minXpAwarded": 8,

    // Maximum XP awarded per eligible message
    "maxXpAwarded": 18
  },

  "counting": {
    // Number: period after which warnings decay/reset. Unit is project-defined.
    // If your implementation uses milliseconds, set ms; otherwise match your loader.
    "warningPeriod": 3600,

    // Number of mistakes allowed within the warning window before consequences
    "mistakeThreshold": 3,

    // Max warnings before escalating action (mute/ban depending on your logic)
    "maxWarnings": 3,

    // Auto-ban duration after threshold reached. Unit is project-defined.
    // Set to 0 for permanent or to disable, depending on your logic.
    "autoBanDuration": 86400
  },

  "dataRetention": {
    // Days to keep level data after a member leaves.
    // Set to 0 or remove key to disable retention and prevent deletion.
    "deleteAfterDays": 30,

    // Days to keep level data after an auto-unban (ignored for permanent bans).
    // Set to 0 or remove key to disable post-ban retention.
    "postBanGraceDays": 7
  },

  "telemetry": {
    // Logging level: "debug" | "info" | "warn" | "error"
    "level": "info",

    "otel": {
      // Enable OpenTelemetry log export
      "enabled": false,

      // Service name reported to the collector
      "serviceName": "poixpixel-discord-bot",

      // OTLP HTTP/JSON logs endpoint (commonly http://host:4318/v1/logs)
      "otlpEndpoint": "http://localhost:4318/v1/logs",

      // Optional headers for auth to your collector
      "headers": {
        // Example: Bearer token
        "Authorization": "Bearer <token-if-needed>"
      },

      // Resource attributes attached to every log
      "resourceAttributes": {
        "deployment.environment": "local"
      },

      // Batch export configuration (tune for your environment)
      "batch": {
        // Max queue size for batching
        "maxQueueSize": 2048,

        // Interval between exports in ms
        "scheduledDelayMillis": 5000,

        // Export timeout in ms
        "exportTimeoutMillis": 30000,

        // Max items per export batch
        "maxExportBatchSize": 512
      }
    }
  }
}
